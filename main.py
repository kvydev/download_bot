from aiogram import Bot, Dispatcher, executor, types, md
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import *
from filters import IsFile
from middlewares import AddUser
from db import db
import keyboards

bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

db = db()

@dp.message_handler(IsFile(), commands='start')
async def start(message: types.Message):
	link = message.get_args()
	n = '\n'
	await message.delete()
	await message.answer(f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª, –≤–∞–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª—ã\n\n{md.hspoiler(f"–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏{n}–ï—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–∞, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏")}', reply_markup=keyboards.download(link), parse_mode=types.ParseMode.HTML)
	db.add_view(link, message.chat.id)

@dp.message_handler(commands='start')
async def start(message: types.Message):
	await message.answer(f'ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\nüíæ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –±–æ—Ç–∞, –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É\n\n–î–ª—è –∑–∞–∫–∞–∑–∞ –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫: @kvydev')

@dp.message_handler(content_types=types.ContentTypes.DOCUMENT)
async def get_file(message: types.Message):
	link = db.add_fid(message.document.file_id, message.chat.id)
	await message.reply(f'–°—Å—ã–ª–∫–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É - {BOT_URL}?start={link}')

@dp.callback_query_handler(lambda query: query.data.startswith('like'))
async def like(query: types.CallbackQuery):
	link = query.data.split('_')[1]
	try:
		db.like(link, query.message.chat.id)
		likes, dislikes = db.get_rating_file(link, query.message.chat.id)
		await query.message.edit_reply_markup(keyboards.rating(link, likes, dislikes))
		await query.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')
	except:
		await query.answer('–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É')

@dp.callback_query_handler(lambda query: query.data.startswith('dislike'))
async def like(query: types.CallbackQuery):
	link = query.data.split('_')[1]
	try:
		db.dislike(link, query.message.chat.id)
		likes, dislikes = db.get_rating_file(link, query.message.chat.id)
		await query.message.edit_reply_markup(keyboards.rating(link, likes, dislikes))
		await query.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')
	except:
		await query.answer('–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É')

@dp.callback_query_handler()
async def download(query: types.CallbackQuery):
	try:
		likes, dislikes = db.get_rating_file(query.data, query.message.chat.id)
		await query.message.answer_document(db.get_fid(query.data, query.message.chat.id), reply_markup=keyboards.rating(query.data, likes, dislikes))
		db.add_download(query.data, query.message.chat.id)
	except:
		await query.answer('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
	finally:
		await query.message.delete()

if __name__ == '__main__':
	db.create_db()
	dp.setup_middleware(AddUser())
	executor.start_polling(dp)